import { Component, OnInit } from '@angular/core';
import { NgxXml2jsonService } from 'ngx-xml2json';
import { XmlDataService } from './Xml-Data.service'

@Component({
selector: 'app-root',
templateUrl: './app.component.html',
styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit {
title = 'app';
data: any;
product_img;
xml = `<note><to>User</to><from>Library</from><heading>Message</heading><body>Some XML to convert to JSON!</body></note>`;
exportdata=[];
constructor(private ngxXml2jsonService: NgxXml2jsonService, private XmlData: XmlDataService) {

}
ngOnInit() {
this.ImportRecords();
}

ImportRecords() {
this.XmlData.getXML().subscribe(data => {
this.data = data;
//console.log(data);
const parser = new DOMParser();
const xml = parser.parseFromString(this.data, 'text/xml');
const obj = this.ngxXml2jsonService.xmlToJson(xml);
//console.log(xml);
//console.log(obj);
this.product_img = obj['catalog']['product'];      
console.log(this.product_img);
// console.log(obj['catalog']['product'][0]);
//console.log(obj['catalog']['product'][0]);
});

}
refreshImages(status) {
if (status == true) {
console.log("Uploaded successfully!");
this.ImportRecords();

}
}

ExportRecords(){
var items=document.getElementsByName('acs');
var selectedItems=[];
for(var i=0; i<items.length; i++){
if(items[i].checked==true)
selectedItems.push(items[i].value);
}        
for(var n=0;n<this.product_img.length;n++){
for(var m=0;m<selectedItems.length;m++){
if(this.product_img[n].sku==selectedItems[m]){
this.exportdata.push(this.product_img[n]);
}
}
}
console.log(this.exportdata);
var inputJSON = '{"catalog":{"product":';
var k='}}';
var finalxml=inputJSON+JSON.stringify(this.exportdata)+k;
console.log(finalxml);
this.doco(finalxml);
}
doco(parsedInput){
var output = this.OBJtoXML(JSON.parse(parsedInput));

//console.log(output)

    var pom = document.createElement('a');
    pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(output));
    pom.setAttribute('download', 'selected.xml');

    if (document.createEvent) {
        var event = document.createEvent('MouseEvents');
        event.initEvent('click', true, true);
        pom.dispatchEvent(event);
    }
    else {
        pom.click();
    }
    


}
OBJtoXML(obj) {
    var xml = '';
    for (var prop in obj) {
        if (obj[prop] instanceof Array) {
            for (var array in obj[prop]) {
                xml += '<' + prop + '>';
                xml += this.OBJtoXML(new Object(obj[prop][array]));
                xml += '</' + prop + '>';
            }
        } else {
            xml += '<' + prop + '>';
            typeof obj[prop] == 'object' ? xml += this.OBJtoXML(new Object(obj[prop])) : xml += obj[prop];
            xml += '</' + prop + '>';
        }
    }
    var xml = xml.replace(/<\/?[0-9]{1,}>/g, '');
    return xml;
}
}